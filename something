#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cstring>

using namespace std;

char *keyWordList[] = {"include","auto","break","case","char","const","continue","default","do","double",
                       "else","enum","extern","float","for","goto","if","int","long","register",
                       "return","short","signed","sizeof","static","struct","switch","typedef",
                       "union","unsigned","volatile","while"
                      };//by order

char *symbolList[] = { "+","-","*","/","%",";",",","{","}",")","(",">","<","=","[","]",":","?","!","&","|",
                       "++","--","==","\'","\"",":=",">=","<=","!=","&&","||","+=","-=","*=","/=","^",">>","<<","~", "#"
                     };//by order unnecessary notation

const int inBufSize = 100;      //实际上缓冲区的大小问题不大，因为它是按字符读取的。随手取了100
const int WORD_MAX_LEN = 100;   //考虑到一般不会有太极端的变量名，所以取100
const int KEY_WORD_NUM = 32;    //keyWordList[]的元素个数
const int SYMBOL_NUM = 41;      //ymbolList[]的元素个数

int noteState;   //标示“去注释自动机”的状态，具体状态转移图见文档

/*以下五个flag指示"当前已读取信息是否仍有可能属于该类别"*/
bool kyFlag;    //关键字
bool idFlag;    //标识符
int charFlag;   //０表示非字符串常量１表示单引号　２表示双引号
bool numFlag;   //数字常量
bool opFlag;    //运算符

bool escapeCharFlag = 0;    //转义字符

/*几个前向申明*/
void init(FILE *, char []);
int read(FILE *, char [], int);
void wordOutput(FILE *, char *);
void errorOutput(FILE *, int, int, int &);

void preProcess(FILE *ferror, int errorCnt)   //预处理：去注释＋统计行号
{
    FILE *fin, *fpre;
    fin = fopen("in.txt", "r");
    fpre = fopen("pre.txt", "w");

    char preInBuf[inBufSize * 2];//buffer for reading character
    init(fin, preInBuf);

    int prePt = 0;

    while(true)
    {
        if(preInBuf[prePt] == EOF)
        {
            if(prePt == (inBufSize - 1))    //碰到左半区的ＥＯＦ
            {
                read(fin, preInBuf, 1); //重新填充右半区
                prePt++;          //向右移动至下一个缓冲区
            }
            else if(prePt == (2*inBufSize - 1)) //碰到右半区的ＥＯＦ
            {
                read(fin, preInBuf, 0); //重新装填左半区
                prePt = (prePt+1) % (2*inBufSize);
            }
            else
            {
                if(noteState == 3)  //这里处理一个特殊情况　整个自动机中只有状态３是攒了一个带输出的字符，所以此时要及时把它输出
                {
                    fprintf(fpre, "/");
                }
                break;              //终止词法分析
            }
        }

        switch(noteState)   //ＤＦＡ
        {
            case 0:                         //无注释状态
                if(preInBuf[prePt] == '/')
                    noteState = 3;
                else if(preInBuf[prePt] == '\'')
                {
                    fprintf(fpre, "\'");
                    noteState = 5;
                }
                else if(preInBuf[prePt] == '\"')
                {
                    fprintf(fpre, "\"");
                    noteState = 6;
                }
                else
                    fprintf(fpre, "%c", preInBuf[prePt]);
                break;
            case 1:                         //“/*...*/”注释状态
                if(preInBuf[prePt] == '*')
                    noteState = 4;
                else if(preInBuf[prePt] == '\n')
                {
                    noteState = 1;
                    fprintf(fpre, "\n");
                }
                else
                    noteState = 1;
                break;
            case 2:                         //“//...”注释状态
                if(preInBuf[prePt] == '\n')
                {
                    noteState = 0;
                    fprintf(fpre, "\n");
                }
                else
                    noteState = 2;
                break;
            case 3:                         //中间状态：已经在非注释状态下读入了一个'/'
                if(preInBuf[prePt] == '*')
                    noteState = 1;
                else if(preInBuf[prePt] == '/')
                    noteState = 2;
                else if(preInBuf[prePt] == '\'')
                {
                    fprintf(fpre, "/");
                    fprintf(fpre, "\'");
                    noteState = 5;
                }
                else if(preInBuf[prePt] == '\"')
                {
                    fprintf(fpre, "/");
                    fprintf(fpre, "\"");
                    noteState = 6;
                }
                else
                {
                    fprintf(fpre, "/");
                    fprintf(fpre, "%c", preInBuf[prePt]);
                    noteState = 0;
                }
                break;
            case 4:                         //中间状态：在状态１下已经读到了一个'*'
                if(preInBuf[prePt] == '/')
                    noteState = 0;
                else if(preInBuf[prePt] == '*')
                    noteState = 4;
                else if(preInBuf[prePt] == '\n')
                {
                    noteState = 1;
                    fprintf(fpre, "\n");
                }
                else
                    noteState = 1;
                break;
            case 5:
                if(preInBuf[prePt] == '\'')
                {
                    fprintf(fpre, "\'");
                    noteState = 0;
                }
                else if(preInBuf[prePt] == '\n')
                {
                    fprintf(fpre, "\n");
                    noteState = 0;
                }
                else if(preInBuf[prePt] == '\\')
                {
                    fprintf(fpre, "\\");
                    noteState = 7;
                }
                else
                {
                    fprintf(fpre, "%c", preInBuf[prePt]);
                    noteState = 5;
                }
                break;
            case 6:
                if(preInBuf[prePt] == '\"')
                {
                    fprintf(fpre, "\"");
                    noteState = 0;
                }
                else if(preInBuf[prePt] == '\n')
                {
                    fprintf(fpre, "\n");
                    noteState = 0;
                }
                else if(preInBuf[prePt] == '\\')
                {
                    fprintf(fpre, "\\");
                    noteState = 8;
                }
                else
                {
                    fprintf(fpre, "%c", preInBuf[prePt]);
                    noteState = 6;
                }
                break;
            case 7:
                fprintf(fpre, "%c", preInBuf[prePt]);
                noteState = 5;
                break;
            case 8:
                fprintf(fpre, "%c", preInBuf[prePt]);
                noteState = 6;
                break;
        }

        prePt++;
    }

    if(noteState == 1 || noteState == 4)
        errorOutput(ferror, -1, 2, errorCnt);
    fclose(fin);
    fclose(fpre);
}


void wordAnalyse(FILE *ftable, FILE *ferror, char word[], int len, int lineCnt, int &wordCnt, int &errorCnt)  //把Flag们筛剩一个，或者一个都没有
{
    if(len > WORD_MAX_LEN) //当长度大于限定，判定为非法
    {
        errorOutput(ferror, lineCnt, 5, errorCnt);
        return;
    }


    word[len] = '\0';

    if(kyFlag == true)
    {
        bool tmpFound = false;
        for(int i = 0; i < KEY_WORD_NUM && !tmpFound; i++)
        {
            if(strcmp(word, keyWordList[i]) == 0)
            {
                tmpFound = true;
                idFlag = numFlag = charFlag = opFlag = false;
            }
        }
        if(tmpFound == false)
            kyFlag = false;
    }

    if(idFlag == true)
    {
        //貌似不用处理
    }

    if(charFlag == true)
    {
        //貌似不用处理
    }

    if(numFlag == true) //判一下是否为一个合法的数字常量 eg：1.1e6是合法的
    {
        bool tmpFlag = true;
        int eCnt = 0;
        int tmpDotCnt = 0;

        for(int i = 0; i < len && tmpFlag; i++)
        {
            if(word[i] == 'e')  //‘ｅ'只能出现一次
            {
                eCnt++;
                if(eCnt > 1)
                    tmpFlag = false;
            }
            else if(word[i] == '.')
            {
                tmpDotCnt++;
                if(tmpDotCnt == 1)
                {
                    if(eCnt > 0)    //小数点不能出现在‘ｅ’后面
                        tmpFlag = false;

                    else if(!(i < len - 1 && isdigit(word[i+1])))//小数点后必须紧跟一个阿拉伯数字字符
                        tmpFlag = false;
                }
                else if(tmpDotCnt > 1)  //小数点只能出现一次
                    tmpFlag = false;
            }
        }

        if(tmpFlag == false)
            numFlag = false;
    }

    if(!(kyFlag == false && idFlag == false && charFlag == false && numFlag == false))
    {
        wordOutput(ftable, word);
        wordCnt++;
    }

    if(opFlag == true)
    {
        int tmpHead = 0;
        char tmpBuf[3];
        while(tmpHead < len)
        {
            bool tmpFound = false;

            //先搜长度为２的（符号的最长匹配原则）
            if(tmpHead + 2 <= len)
            {
                tmpBuf[0] = word[tmpHead];
                tmpBuf[1] = word[tmpHead+1];
                tmpBuf[2] = '\0';

                for(int i = 0; i < SYMBOL_NUM && !tmpFound; i++)
                {
                    if(strcmp(tmpBuf, symbolList[i]) == 0)
                    {
                        tmpFound = true;
                        tmpHead += 2;
                    }
                }
            }

            //若搜索不到长度为２的，则搜索长度为１的
            if(!tmpFound)
            {
                tmpBuf[0] = word[tmpHead];
                tmpBuf[1] = '\0';
            }

            for(int i = 0; i < SYMBOL_NUM && !tmpFound; i++)
            {
                if(strcmp(tmpBuf, symbolList[i]) == 0)
                {
                    tmpFound = true;
                    tmpHead += 1;
                }
            }

            if(tmpFound)
            {
                wordOutput(ftable, tmpBuf);
                wordCnt++;
            }
            else
            {
                errorOutput(ferror, lineCnt, 4, errorCnt);
            }
        }
    }
    if(kyFlag == false && idFlag == false && charFlag == false && numFlag == false && opFlag == false)
        errorOutput(ferror, lineCnt, 4, errorCnt);  //每一种模式都匹配不上

}

void wordOutput(FILE *fout, char *word)   //五种模式
{
    if(kyFlag == true)
    {
        //fprintf(fout, "<%s, ->\n", word);
        fprintf(fout, "%s, -\n", word);
    }
    else if(idFlag == true)
    {
        //fprintf(fout, "<id, %s>\n", word);
        fprintf(fout, "id, %s\n", word);
    }
    else if(numFlag == true)
    {
        //fprintf(fout, "<num, %s>\n", word);
        fprintf(fout, "num, %s\n", word);
    }
    else if(charFlag)
    {
        //fprintf(fout, "<char, %s>\n", word);
        fprintf(fout, "char, %s\n", word);
    }
    else if(opFlag == true)
    {
        //fprintf(fout, "<%s, ->\n", word);
        fprintf(fout, "%s, -\n", word);
    }
}

void errorOutput(FILE *ferror, int lineCnt, int state, int &errorCnt)
{
    errorCnt++;

    switch(state)
    {
        case 1:
            fprintf(ferror, "Line %d: absence of a quotation(\' or \") for a character constant.\n", lineCnt);
            break;
        case 2:
            fprintf(ferror, "Absence of a '*/' for a note at the end of the file.\n");
            break;
        case 3:
            fprintf(ferror, "Line %d: illegal character.\n", lineCnt);
            break;
        case 4:
            fprintf(ferror, "Line %d: illegal word.\n", lineCnt);
            break;
        case 5:
            fprintf(ferror, "Line %d: overlength of a single word.\n", lineCnt);
            break;
    }

}

void statOutput(int lineCnt, int wordCnt, int charCnt, int errorCnt)
{
    FILE *fstat = fopen("stat.txt", "w");
    fprintf(fstat, "%6d lines\n", lineCnt);
    fprintf(fstat, "%6d characters(excluding notes)\n", charCnt);
    fprintf(fstat, "%6d words(excluding notes, whitespace or punctuations)\n", wordCnt);
    fprintf(fstat, "%6d errors\n", errorCnt);
    fclose(fstat);
}

void init(FILE *fin, char inBuf[])
{
    noteState = 0;
    charFlag = 0;
    kyFlag = idFlag = numFlag = opFlag = true;

    inBuf[inBufSize-1] = inBuf[inBufSize*2 - 1] = EOF;
    read(fin, inBuf, 0);
}

int read(FILE *fin, char inBuf[], int region)  //读取结束返回０　否则返回１
{
    for(int i = 0; i < inBufSize-1; i++)
    {
        inBuf[i + 100*region] = fgetc(fin);
        if(inBuf[i + 100*region] == EOF)
            return 0;
    }
    return 1;
}

int main()
{
    FILE *fin, *ftable, *ferror;

    ferror = fopen("error.txt", "w");

    int lineCnt = 1;
    int wordCnt = 0;
    int charCnt = 0;
    int errorCnt = 0;

    preProcess(ferror, errorCnt);

    fin = fopen("pre.txt", "r");
    ftable = fopen("table.txt", "w");

    char inBuf[inBufSize * 2];  //buffer for reading character
    char curWord[WORD_MAX_LEN+10];   //“+10”是因为除了自身大小还得考虑存'\0'及做单词过程的处理
    int curWordLen = 0;

    init(fin, inBuf);

    int curPt = 0;  //开始指针
    int fwdPt = 0;  //向前指针

    bool beginFlag = 0;

    while(true)
    {
        if(inBuf[fwdPt] == EOF)
        {
            if(fwdPt == (inBufSize - 1))
            {
                read(fin, inBuf, 1); //重新填充右半区
                fwdPt++;          //向右移动至下一个缓冲区
            }
            else if(fwdPt == (2*inBufSize - 1))
            {
                read(fin, inBuf, 0); //重新装填左半区
                fwdPt = (fwdPt+1) % (2*inBufSize);
            }
            else
                break;  //终止词法分析
        }

        if(!(0 <= inBuf[fwdPt] && inBuf[fwdPt] <= 127))
        {
            errorOutput(ferror, lineCnt, 3, errorCnt);
            fwdPt++;
            continue;
        }



        if(charFlag)    //如果是字符常量那什么都合法
        {
            if(charFlag == 1)
            {
                if(inBuf[fwdPt] == '\'' && escapeCharFlag == false)
                {
                    if(curWordLen > 0)
                    {
                        wordAnalyse(ftable, ferror, curWord, curWordLen, lineCnt, wordCnt, errorCnt);
                        curWordLen = 0;
                    }
                    charFlag = 0;
                    kyFlag = idFlag = numFlag = false;
                    opFlag = true;
                    curWord[curWordLen++] = inBuf[fwdPt];
                    wordAnalyse(ftable, ferror, curWord, curWordLen, lineCnt, wordCnt, errorCnt);
                    curWordLen = 0;
                    kyFlag = idFlag = numFlag = opFlag = true; //相关标记的更新

                }
                else if(inBuf[fwdPt] == '\n')
                {
                    if(curWordLen > 0)
                    {
                        wordAnalyse(ftable, ferror, curWord, curWordLen, lineCnt, wordCnt, errorCnt);
                        curWordLen = 0;
                    }
                    kyFlag = idFlag = numFlag = opFlag = true; //相关标记的更新
                    charFlag = 0;

                    errorOutput(ferror, lineCnt, 1, errorCnt);  //字符常量缺引号就换行
                }
                else
                    curWord[curWordLen++] = inBuf[fwdPt];

                if(inBuf[fwdPt] == '\\')
                    escapeCharFlag = !escapeCharFlag;
                else
                    escapeCharFlag = false;
            }
            if(charFlag == 2)
            {
                if(inBuf[fwdPt] == '\"' && escapeCharFlag == false)
                {
                    if(curWordLen > 0)
                    {
                        wordAnalyse(ftable, ferror, curWord, curWordLen, lineCnt, wordCnt, errorCnt);
                        curWordLen = 0;
                    }
                    charFlag = 0;
                    kyFlag = idFlag = numFlag = false;
                    opFlag = true;
                    curWord[curWordLen++] = inBuf[fwdPt];
                    wordAnalyse(ftable, ferror, curWord, curWordLen, lineCnt, wordCnt, errorCnt);
                    curWordLen = 0;
                    kyFlag = idFlag = numFlag = opFlag = true; //相关标记的更新
                }
                else if(inBuf[fwdPt] == '\n')
                {
                    if(curWordLen > 0)
                    {
                        wordAnalyse(ftable, ferror, curWord, curWordLen, lineCnt, wordCnt, errorCnt);
                        curWordLen = 0;
                    }
                    charFlag = 0;
                    kyFlag = idFlag = numFlag = opFlag = true; //相关标记的更新

                    errorOutput(ferror, lineCnt, 1, errorCnt);  //字符常量缺引号就换行
                }
                else
                    curWord[curWordLen++] = inBuf[fwdPt];

                if(inBuf[fwdPt] == '\\')
                    escapeCharFlag = !escapeCharFlag;
                else
                    escapeCharFlag = false;
            }
        }

        else if(('a' <= inBuf[fwdPt] && inBuf[fwdPt] <= 'z' || 'A' <= inBuf[fwdPt] && inBuf[fwdPt] <= 'Z'))
        {
            if(curWordLen > 0 && kyFlag == false && idFlag == false && charFlag == false && numFlag == false)  //表示上一个词至此终止，于是对该词进行分析
            {
                wordAnalyse(ftable, ferror, curWord, curWordLen, lineCnt, wordCnt, errorCnt);
                kyFlag = idFlag = numFlag = opFlag = true; //相关标记的更新
                curWordLen = 0;
            }

            curWord[curWordLen++] = inBuf[fwdPt];   //读入该字符，并删除一些可能
            opFlag = false;
            if(inBuf[fwdPt] != 'e')
                numFlag = false;

        }
        else if('0' <= inBuf[fwdPt] && inBuf[fwdPt] <= '9')
        {
            if(curWordLen > 0 && idFlag == false && numFlag == false && charFlag == false)    //表示上一个词至此终止，于是对该词进行分析
            {
                wordAnalyse(ftable, ferror, curWord, curWordLen, lineCnt, wordCnt, errorCnt);
                kyFlag = idFlag = numFlag = opFlag = true;
                curWordLen = 0;
            }

            kyFlag = opFlag = false;           //读入该字符，并删除一些可能
            if(curWordLen == 0) //标识符不能以数字开头
                idFlag = false;
            curWord[curWordLen++] = inBuf[fwdPt];


        }
        else    //符号
        {
            if(inBuf[fwdPt] == '.')
            {
                curWord[curWordLen++] = inBuf[fwdPt];
                kyFlag = idFlag = opFlag = false;
            }

            else if((inBuf[fwdPt] == '\t' || inBuf[fwdPt] == ' ' || inBuf[fwdPt] == '\n'))   //遇到whitespace，上一个词必定至此终止
            {
                if(curWordLen > 0)
                {
                    wordAnalyse(ftable, ferror, curWord, curWordLen, lineCnt, wordCnt, errorCnt);
                    kyFlag = idFlag = numFlag = opFlag = true;
                    curWordLen = 0;
                }
            }
            else if(inBuf[fwdPt] == '_')    //下划线只可能在标识符或字符常量里面出现。
            {
                if(curWordLen > 0 && idFlag == false && charFlag == false)         //表示上一个词至此终止，于是对该词进行分析
                {
                    wordAnalyse(ftable, ferror, curWord, curWordLen, lineCnt, wordCnt, errorCnt);
                    kyFlag = idFlag = numFlag = opFlag = true;
                    curWordLen = 0;
                }

                curWord[curWordLen++] = inBuf[fwdPt];
                kyFlag = numFlag = opFlag = false;

            }
            else if(inBuf[fwdPt] == '\'')
            {
                if(curWordLen > 0)  //先处理上一个单词
                {
                    wordAnalyse(ftable, ferror, curWord, curWordLen, lineCnt, wordCnt, errorCnt);
                    curWordLen = 0;
                }
                kyFlag = idFlag = numFlag = false;
                opFlag = true;
                curWord[curWordLen++] = inBuf[fwdPt];   //把当前的引号也读进去
                wordAnalyse(ftable, ferror, curWord, curWordLen, lineCnt, wordCnt, errorCnt);       //并马上处理
                kyFlag = idFlag = numFlag = opFlag = false;
                charFlag = 1;
                curWordLen = 0;

            }
            else if(inBuf[fwdPt] == '\"')
            {
                if(curWordLen > 0)
                {
                    wordAnalyse(ftable, ferror, curWord, curWordLen, lineCnt, wordCnt, errorCnt);
                    curWordLen = 0;
                }
                kyFlag = idFlag = numFlag = false;
                opFlag = true;
                curWord[curWordLen++] = inBuf[fwdPt];
                wordAnalyse(ftable, ferror, curWord, curWordLen, lineCnt, wordCnt, errorCnt);
                kyFlag = idFlag = numFlag = opFlag = false;
                charFlag = 2;
                curWordLen = 0;
            }
            else
            {
                if(opFlag == false && curWordLen > 0)
                {
                    wordAnalyse(ftable, ferror, curWord, curWordLen, lineCnt, wordCnt, errorCnt);
                    kyFlag = idFlag = numFlag = opFlag = true;
                    curWordLen = 0;
                }
                 curWord[curWordLen++] = inBuf[fwdPt];
                 kyFlag = idFlag = numFlag = false;
            }
        }

        if(inBuf[fwdPt] == '\n')
            lineCnt++;  //记录当前执行到第几行便于返回错误信息，同时记录总行数
        charCnt++;      //统计总字符数（不包括注释）

        if(curWordLen >= WORD_MAX_LEN+1)    //对单词过长的处理
            curWordLen = WORD_MAX_LEN+1;
        fwdPt++;
    }

    statOutput(lineCnt, wordCnt, charCnt, errorCnt);

    fclose(fin);
    fclose(ftable);
    fclose(ferror);

    return 0;
}
